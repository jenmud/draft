// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: service.proto

package service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// FilterType is the filter type to be applied when filtering/Finding/Searching
type FilterType int32

const (
	// label based filtering
	FilterType_LABEL FilterType = 0
	// property based filtering
	FilterType_PROPERTY FilterType = 1
)

// Enum value maps for FilterType.
var (
	FilterType_name = map[int32]string{
		0: "LABEL",
		1: "PROPERTY",
	}
	FilterType_value = map[string]int32{
		"LABEL":    0,
		"PROPERTY": 1,
	}
)

func (x FilterType) Enum() *FilterType {
	p := new(FilterType)
	*p = x
	return p
}

func (x FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_service_proto_enumTypes[0].Descriptor()
}

func (FilterType) Type() protoreflect.EnumType {
	return &file_service_proto_enumTypes[0]
}

func (x FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterType.Descriptor instead.
func (FilterType) EnumDescriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

// UIDReq is a request used for searching the graph for a node/edge
// which contains the uid.
type UIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
}

func (x *UIDReq) Reset() {
	*x = UIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UIDReq) ProtoMessage() {}

func (x *UIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UIDReq.ProtoReflect.Descriptor instead.
func (*UIDReq) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{0}
}

func (x *UIDReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// NodeReq is a node request.
type NodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Label      string            `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Properties map[string][]byte `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeReq) Reset() {
	*x = NodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeReq) ProtoMessage() {}

func (x *NodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeReq.ProtoReflect.Descriptor instead.
func (*NodeReq) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{1}
}

func (x *NodeReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NodeReq) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *NodeReq) GetProperties() map[string][]byte {
	if x != nil {
		return x.Properties
	}
	return nil
}

// NodeResp is a node response.
type NodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Label      string            `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Properties map[string][]byte `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InEdges    []string          `protobuf:"bytes,4,rep,name=in_edges,json=inEdges,proto3" json:"in_edges,omitempty"`
	OutEdges   []string          `protobuf:"bytes,5,rep,name=out_edges,json=outEdges,proto3" json:"out_edges,omitempty"`
}

func (x *NodeResp) Reset() {
	*x = NodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeResp) ProtoMessage() {}

func (x *NodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeResp.ProtoReflect.Descriptor instead.
func (*NodeResp) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{2}
}

func (x *NodeResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *NodeResp) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *NodeResp) GetProperties() map[string][]byte {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *NodeResp) GetInEdges() []string {
	if x != nil {
		return x.InEdges
	}
	return nil
}

func (x *NodeResp) GetOutEdges() []string {
	if x != nil {
		return x.OutEdges
	}
	return nil
}

// EdgeReq is a edge request.
type EdgeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	SourceUid  string            `protobuf:"bytes,3,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Label      string            `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	TargetUid  string            `protobuf:"bytes,4,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	Properties map[string][]byte `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EdgeReq) Reset() {
	*x = EdgeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeReq) ProtoMessage() {}

func (x *EdgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeReq.ProtoReflect.Descriptor instead.
func (*EdgeReq) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{3}
}

func (x *EdgeReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *EdgeReq) GetSourceUid() string {
	if x != nil {
		return x.SourceUid
	}
	return ""
}

func (x *EdgeReq) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *EdgeReq) GetTargetUid() string {
	if x != nil {
		return x.TargetUid
	}
	return ""
}

func (x *EdgeReq) GetProperties() map[string][]byte {
	if x != nil {
		return x.Properties
	}
	return nil
}

// EdgeResp is a edge response.
type EdgeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	SourceUid  string            `protobuf:"bytes,3,opt,name=source_uid,json=sourceUid,proto3" json:"source_uid,omitempty"`
	Label      string            `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	TargetUid  string            `protobuf:"bytes,4,opt,name=target_uid,json=targetUid,proto3" json:"target_uid,omitempty"`
	Properties map[string][]byte `protobuf:"bytes,5,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *EdgeResp) Reset() {
	*x = EdgeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeResp) ProtoMessage() {}

func (x *EdgeResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeResp.ProtoReflect.Descriptor instead.
func (*EdgeResp) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{4}
}

func (x *EdgeResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *EdgeResp) GetSourceUid() string {
	if x != nil {
		return x.SourceUid
	}
	return ""
}

func (x *EdgeResp) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *EdgeResp) GetTargetUid() string {
	if x != nil {
		return x.TargetUid
	}
	return ""
}

func (x *EdgeResp) GetProperties() map[string][]byte {
	if x != nil {
		return x.Properties
	}
	return nil
}

// RemoveResp is a response when removing a item from the graph.
type RemoveResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid     string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Success bool   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *RemoveResp) Reset() {
	*x = RemoveResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveResp) ProtoMessage() {}

func (x *RemoveResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveResp.ProtoReflect.Descriptor instead.
func (*RemoveResp) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{5}
}

func (x *RemoveResp) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RemoveResp) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *RemoveResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// NodesReq used for returning all the nodes in the graph.
type NodesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodesReq) Reset() {
	*x = NodesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodesReq) ProtoMessage() {}

func (x *NodesReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodesReq.ProtoReflect.Descriptor instead.
func (*NodesReq) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{6}
}

// EdgesReq used for returning all the edges in the graph.
type EdgesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EdgesReq) Reset() {
	*x = EdgesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgesReq) ProtoMessage() {}

func (x *EdgesReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgesReq.ProtoReflect.Descriptor instead.
func (*EdgesReq) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{7}
}

// DumpReq is a request to producting a graph dump.
type DumpReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Starting node for a subgraph. If omitted then the entire graph is dumped.
	NodeUid string `protobuf:"bytes,1,opt,name=node_uid,json=nodeUid,proto3" json:"node_uid,omitempty"`
	// How many levels to return. If omitted then the no limit is applied.
	Levels int32 `protobuf:"varint,2,opt,name=levels,proto3" json:"levels,omitempty"`
}

func (x *DumpReq) Reset() {
	*x = DumpReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpReq) ProtoMessage() {}

func (x *DumpReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpReq.ProtoReflect.Descriptor instead.
func (*DumpReq) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{8}
}

func (x *DumpReq) GetNodeUid() string {
	if x != nil {
		return x.NodeUid
	}
	return ""
}

func (x *DumpReq) GetLevels() int32 {
	if x != nil {
		return x.Levels
	}
	return 0
}

// DumpResp is a graph dump response.
type DumpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeResp `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Edges []*EdgeResp `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
}

func (x *DumpResp) Reset() {
	*x = DumpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpResp) ProtoMessage() {}

func (x *DumpResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpResp.ProtoReflect.Descriptor instead.
func (*DumpResp) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{9}
}

func (x *DumpResp) GetNodes() []*NodeResp {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *DumpResp) GetEdges() []*EdgeResp {
	if x != nil {
		return x.Edges
	}
	return nil
}

// StatsReq is a stats message containing inforamtion about the service.
type StatsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatsReq) Reset() {
	*x = StatsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsReq) ProtoMessage() {}

func (x *StatsReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsReq.ProtoReflect.Descriptor instead.
func (*StatsReq) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{10}
}

// StatsResp is the stats response with information about the service.
type StatsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start time in UTC when the instance started.
	StartTime string `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// number of CPUS available.
	NumCpu int32 `protobuf:"varint,2,opt,name=num_cpu,json=numCpu,proto3" json:"num_cpu,omitempty"`
	// number of goroutings running.
	NumGoroutines int32 `protobuf:"varint,3,opt,name=num_goroutines,json=numGoroutines,proto3" json:"num_goroutines,omitempty"`
	// number of nodes in the graph.
	NodeCount int32 `protobuf:"varint,4,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	// number of edges in the graph.
	EdgeCount int32 `protobuf:"varint,5,opt,name=edge_count,json=edgeCount,proto3" json:"edge_count,omitempty"`
	// total memory allocated in bytes.
	TotalMemoryAlloc int32 `protobuf:"varint,6,opt,name=total_memory_alloc,json=totalMemoryAlloc,proto3" json:"total_memory_alloc,omitempty"`
}

func (x *StatsResp) Reset() {
	*x = StatsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResp) ProtoMessage() {}

func (x *StatsResp) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResp.ProtoReflect.Descriptor instead.
func (*StatsResp) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{11}
}

func (x *StatsResp) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *StatsResp) GetNumCpu() int32 {
	if x != nil {
		return x.NumCpu
	}
	return 0
}

func (x *StatsResp) GetNumGoroutines() int32 {
	if x != nil {
		return x.NumGoroutines
	}
	return 0
}

func (x *StatsResp) GetNodeCount() int32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *StatsResp) GetEdgeCount() int32 {
	if x != nil {
		return x.EdgeCount
	}
	return 0
}

func (x *StatsResp) GetTotalMemoryAlloc() int32 {
	if x != nil {
		return x.TotalMemoryAlloc
	}
	return 0
}

// Filter is a rule for filtering when doing a search.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of filter to be applied, eg: label, property
	Type FilterType `protobuf:"varint,1,opt,name=type,proto3,enum=FilterType" json:"type,omitempty"`
	// key used when doing property filtering
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// value to filter for eg: Value{Type: "string", Value:"name"}
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{12}
}

func (x *Filter) GetType() FilterType {
	if x != nil {
		return x.Type
	}
	return FilterType_LABEL
}

func (x *Filter) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Filter) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// FilterReq used for searching
type FilterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter []*Filter `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
}

func (x *FilterReq) Reset() {
	*x = FilterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterReq) ProtoMessage() {}

func (x *FilterReq) ProtoReflect() protoreflect.Message {
	mi := &file_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterReq.ProtoReflect.Descriptor instead.
func (*FilterReq) Descriptor() ([]byte, []int) {
	return file_service_proto_rawDescGZIP(), []int{13}
}

func (x *FilterReq) GetFilter() []*Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

var File_service_proto protoreflect.FileDescriptor

var file_service_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x1a, 0x0a, 0x06, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x07,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x38, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x39, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x45, 0x64,
	0x67, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x45, 0x64, 0x67, 0x65, 0x73,
	0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe8, 0x01, 0x0a, 0x07, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x08, 0x45,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x0a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x22,
	0x3c, 0x0a, 0x07, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x4c, 0x0a,
	0x08, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x22, 0x0a, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x22, 0xd6, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x22, 0x51, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x07, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x2a, 0x25, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52,
	0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x10, 0x01, 0x32, 0xec, 0x02, 0x0a, 0x05, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x12, 0x1e, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x07, 0x2e, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x07,
	0x2e, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1f, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x09, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x30, 0x01, 0x12, 0x24, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x0a, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x30, 0x01, 0x12, 0x1e, 0x0a, 0x07, 0x41, 0x64, 0x64,
	0x45, 0x64, 0x67, 0x65, 0x12, 0x08, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x0a, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x45, 0x64, 0x67, 0x65, 0x12, 0x07, 0x2e, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x1a, 0x0b, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a,
	0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x07, 0x2e, 0x55, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x09,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x05, 0x45, 0x64, 0x67,
	0x65, 0x73, 0x12, 0x09, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x30, 0x01, 0x12, 0x1e, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x09, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0a,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1b, 0x0a, 0x04, 0x44, 0x75,
	0x6d, 0x70, 0x12, 0x08, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x44,
	0x75, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_service_proto_rawDescOnce sync.Once
	file_service_proto_rawDescData = file_service_proto_rawDesc
)

func file_service_proto_rawDescGZIP() []byte {
	file_service_proto_rawDescOnce.Do(func() {
		file_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_service_proto_rawDescData)
	})
	return file_service_proto_rawDescData
}

var file_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_service_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_service_proto_goTypes = []interface{}{
	(FilterType)(0),    // 0: FilterType
	(*UIDReq)(nil),     // 1: UIDReq
	(*NodeReq)(nil),    // 2: NodeReq
	(*NodeResp)(nil),   // 3: NodeResp
	(*EdgeReq)(nil),    // 4: EdgeReq
	(*EdgeResp)(nil),   // 5: EdgeResp
	(*RemoveResp)(nil), // 6: RemoveResp
	(*NodesReq)(nil),   // 7: NodesReq
	(*EdgesReq)(nil),   // 8: EdgesReq
	(*DumpReq)(nil),    // 9: DumpReq
	(*DumpResp)(nil),   // 10: DumpResp
	(*StatsReq)(nil),   // 11: StatsReq
	(*StatsResp)(nil),  // 12: StatsResp
	(*Filter)(nil),     // 13: Filter
	(*FilterReq)(nil),  // 14: FilterReq
	nil,                // 15: NodeReq.PropertiesEntry
	nil,                // 16: NodeResp.PropertiesEntry
	nil,                // 17: EdgeReq.PropertiesEntry
	nil,                // 18: EdgeResp.PropertiesEntry
}
var file_service_proto_depIdxs = []int32{
	15, // 0: NodeReq.properties:type_name -> NodeReq.PropertiesEntry
	16, // 1: NodeResp.properties:type_name -> NodeResp.PropertiesEntry
	17, // 2: EdgeReq.properties:type_name -> EdgeReq.PropertiesEntry
	18, // 3: EdgeResp.properties:type_name -> EdgeResp.PropertiesEntry
	3,  // 4: DumpResp.nodes:type_name -> NodeResp
	5,  // 5: DumpResp.edges:type_name -> EdgeResp
	0,  // 6: Filter.type:type_name -> FilterType
	13, // 7: FilterReq.filter:type_name -> Filter
	2,  // 8: Graph.AddNode:input_type -> NodeReq
	1,  // 9: Graph.RemoveNode:input_type -> UIDReq
	1,  // 10: Graph.Node:input_type -> UIDReq
	7,  // 11: Graph.Nodes:input_type -> NodesReq
	14, // 12: Graph.FindNodes:input_type -> FilterReq
	4,  // 13: Graph.AddEdge:input_type -> EdgeReq
	1,  // 14: Graph.RemoveEdge:input_type -> UIDReq
	1,  // 15: Graph.Edge:input_type -> UIDReq
	8,  // 16: Graph.Edges:input_type -> EdgesReq
	11, // 17: Graph.Stats:input_type -> StatsReq
	9,  // 18: Graph.Dump:input_type -> DumpReq
	3,  // 19: Graph.AddNode:output_type -> NodeResp
	6,  // 20: Graph.RemoveNode:output_type -> RemoveResp
	3,  // 21: Graph.Node:output_type -> NodeResp
	3,  // 22: Graph.Nodes:output_type -> NodeResp
	3,  // 23: Graph.FindNodes:output_type -> NodeResp
	5,  // 24: Graph.AddEdge:output_type -> EdgeResp
	6,  // 25: Graph.RemoveEdge:output_type -> RemoveResp
	5,  // 26: Graph.Edge:output_type -> EdgeResp
	5,  // 27: Graph.Edges:output_type -> EdgeResp
	12, // 28: Graph.Stats:output_type -> StatsResp
	10, // 29: Graph.Dump:output_type -> DumpResp
	19, // [19:30] is the sub-list for method output_type
	8,  // [8:19] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_service_proto_init() }
func file_service_proto_init() {
	if File_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_service_proto_goTypes,
		DependencyIndexes: file_service_proto_depIdxs,
		EnumInfos:         file_service_proto_enumTypes,
		MessageInfos:      file_service_proto_msgTypes,
	}.Build()
	File_service_proto = out.File
	file_service_proto_rawDesc = nil
	file_service_proto_goTypes = nil
	file_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GraphClient is the client API for Graph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphClient interface {
	// AddNode adds a node to the graph.
	AddNode(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeResp, error)
	// RemoveNode remove a node from the graph.
	RemoveNode(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*RemoveResp, error)
	// Node returns the node if found.
	Node(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*NodeResp, error)
	// Nodes returns all the node in the graph.
	Nodes(ctx context.Context, in *NodesReq, opts ...grpc.CallOption) (Graph_NodesClient, error)
	// FindNode filter for node matching the filters.
	FindNodes(ctx context.Context, in *FilterReq, opts ...grpc.CallOption) (Graph_FindNodesClient, error)
	// AddEdge adds a edge to the graph.
	AddEdge(ctx context.Context, in *EdgeReq, opts ...grpc.CallOption) (*EdgeResp, error)
	// RemoveEdge remove a edge from the graph.
	RemoveEdge(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*RemoveResp, error)
	// Edge returns the edge if found.
	Edge(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*EdgeResp, error)
	// Edges returns all the edges in the graph.
	Edges(ctx context.Context, in *EdgesReq, opts ...grpc.CallOption) (Graph_EdgesClient, error)
	// Stats returns some stats about the service.
	Stats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsResp, error)
	// Dump the graph.
	Dump(ctx context.Context, in *DumpReq, opts ...grpc.CallOption) (*DumpResp, error)
}

type graphClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphClient(cc grpc.ClientConnInterface) GraphClient {
	return &graphClient{cc}
}

func (c *graphClient) AddNode(ctx context.Context, in *NodeReq, opts ...grpc.CallOption) (*NodeResp, error) {
	out := new(NodeResp)
	err := c.cc.Invoke(ctx, "/Graph/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) RemoveNode(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*RemoveResp, error) {
	out := new(RemoveResp)
	err := c.cc.Invoke(ctx, "/Graph/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) Node(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*NodeResp, error) {
	out := new(NodeResp)
	err := c.cc.Invoke(ctx, "/Graph/Node", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) Nodes(ctx context.Context, in *NodesReq, opts ...grpc.CallOption) (Graph_NodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Graph_serviceDesc.Streams[0], "/Graph/Nodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Graph_NodesClient interface {
	Recv() (*NodeResp, error)
	grpc.ClientStream
}

type graphNodesClient struct {
	grpc.ClientStream
}

func (x *graphNodesClient) Recv() (*NodeResp, error) {
	m := new(NodeResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphClient) FindNodes(ctx context.Context, in *FilterReq, opts ...grpc.CallOption) (Graph_FindNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Graph_serviceDesc.Streams[1], "/Graph/FindNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphFindNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Graph_FindNodesClient interface {
	Recv() (*NodeResp, error)
	grpc.ClientStream
}

type graphFindNodesClient struct {
	grpc.ClientStream
}

func (x *graphFindNodesClient) Recv() (*NodeResp, error) {
	m := new(NodeResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphClient) AddEdge(ctx context.Context, in *EdgeReq, opts ...grpc.CallOption) (*EdgeResp, error) {
	out := new(EdgeResp)
	err := c.cc.Invoke(ctx, "/Graph/AddEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) RemoveEdge(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*RemoveResp, error) {
	out := new(RemoveResp)
	err := c.cc.Invoke(ctx, "/Graph/RemoveEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) Edge(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*EdgeResp, error) {
	out := new(EdgeResp)
	err := c.cc.Invoke(ctx, "/Graph/Edge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) Edges(ctx context.Context, in *EdgesReq, opts ...grpc.CallOption) (Graph_EdgesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Graph_serviceDesc.Streams[2], "/Graph/Edges", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphEdgesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Graph_EdgesClient interface {
	Recv() (*EdgeResp, error)
	grpc.ClientStream
}

type graphEdgesClient struct {
	grpc.ClientStream
}

func (x *graphEdgesClient) Recv() (*EdgeResp, error) {
	m := new(EdgeResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphClient) Stats(ctx context.Context, in *StatsReq, opts ...grpc.CallOption) (*StatsResp, error) {
	out := new(StatsResp)
	err := c.cc.Invoke(ctx, "/Graph/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) Dump(ctx context.Context, in *DumpReq, opts ...grpc.CallOption) (*DumpResp, error) {
	out := new(DumpResp)
	err := c.cc.Invoke(ctx, "/Graph/Dump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServer is the server API for Graph service.
type GraphServer interface {
	// AddNode adds a node to the graph.
	AddNode(context.Context, *NodeReq) (*NodeResp, error)
	// RemoveNode remove a node from the graph.
	RemoveNode(context.Context, *UIDReq) (*RemoveResp, error)
	// Node returns the node if found.
	Node(context.Context, *UIDReq) (*NodeResp, error)
	// Nodes returns all the node in the graph.
	Nodes(*NodesReq, Graph_NodesServer) error
	// FindNode filter for node matching the filters.
	FindNodes(*FilterReq, Graph_FindNodesServer) error
	// AddEdge adds a edge to the graph.
	AddEdge(context.Context, *EdgeReq) (*EdgeResp, error)
	// RemoveEdge remove a edge from the graph.
	RemoveEdge(context.Context, *UIDReq) (*RemoveResp, error)
	// Edge returns the edge if found.
	Edge(context.Context, *UIDReq) (*EdgeResp, error)
	// Edges returns all the edges in the graph.
	Edges(*EdgesReq, Graph_EdgesServer) error
	// Stats returns some stats about the service.
	Stats(context.Context, *StatsReq) (*StatsResp, error)
	// Dump the graph.
	Dump(context.Context, *DumpReq) (*DumpResp, error)
}

// UnimplementedGraphServer can be embedded to have forward compatible implementations.
type UnimplementedGraphServer struct {
}

func (*UnimplementedGraphServer) AddNode(context.Context, *NodeReq) (*NodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (*UnimplementedGraphServer) RemoveNode(context.Context, *UIDReq) (*RemoveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (*UnimplementedGraphServer) Node(context.Context, *UIDReq) (*NodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Node not implemented")
}
func (*UnimplementedGraphServer) Nodes(*NodesReq, Graph_NodesServer) error {
	return status.Errorf(codes.Unimplemented, "method Nodes not implemented")
}
func (*UnimplementedGraphServer) FindNodes(*FilterReq, Graph_FindNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method FindNodes not implemented")
}
func (*UnimplementedGraphServer) AddEdge(context.Context, *EdgeReq) (*EdgeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEdge not implemented")
}
func (*UnimplementedGraphServer) RemoveEdge(context.Context, *UIDReq) (*RemoveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEdge not implemented")
}
func (*UnimplementedGraphServer) Edge(context.Context, *UIDReq) (*EdgeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edge not implemented")
}
func (*UnimplementedGraphServer) Edges(*EdgesReq, Graph_EdgesServer) error {
	return status.Errorf(codes.Unimplemented, "method Edges not implemented")
}
func (*UnimplementedGraphServer) Stats(context.Context, *StatsReq) (*StatsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedGraphServer) Dump(context.Context, *DumpReq) (*DumpResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dump not implemented")
}

func RegisterGraphServer(s *grpc.Server, srv GraphServer) {
	s.RegisterService(&_Graph_serviceDesc, srv)
}

func _Graph_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Graph/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).AddNode(ctx, req.(*NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Graph/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).RemoveNode(ctx, req.(*UIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_Node_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).Node(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Graph/Node",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).Node(ctx, req.(*UIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_Nodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NodesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServer).Nodes(m, &graphNodesServer{stream})
}

type Graph_NodesServer interface {
	Send(*NodeResp) error
	grpc.ServerStream
}

type graphNodesServer struct {
	grpc.ServerStream
}

func (x *graphNodesServer) Send(m *NodeResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Graph_FindNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilterReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServer).FindNodes(m, &graphFindNodesServer{stream})
}

type Graph_FindNodesServer interface {
	Send(*NodeResp) error
	grpc.ServerStream
}

type graphFindNodesServer struct {
	grpc.ServerStream
}

func (x *graphFindNodesServer) Send(m *NodeResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Graph_AddEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).AddEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Graph/AddEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).AddEdge(ctx, req.(*EdgeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_RemoveEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).RemoveEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Graph/RemoveEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).RemoveEdge(ctx, req.(*UIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_Edge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).Edge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Graph/Edge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).Edge(ctx, req.(*UIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_Edges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EdgesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphServer).Edges(m, &graphEdgesServer{stream})
}

type Graph_EdgesServer interface {
	Send(*EdgeResp) error
	grpc.ServerStream
}

type graphEdgesServer struct {
	grpc.ServerStream
}

func (x *graphEdgesServer) Send(m *EdgeResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Graph_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Graph/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).Stats(ctx, req.(*StatsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_Dump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).Dump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Graph/Dump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).Dump(ctx, req.(*DumpReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Graph_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Graph",
	HandlerType: (*GraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _Graph_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Graph_RemoveNode_Handler,
		},
		{
			MethodName: "Node",
			Handler:    _Graph_Node_Handler,
		},
		{
			MethodName: "AddEdge",
			Handler:    _Graph_AddEdge_Handler,
		},
		{
			MethodName: "RemoveEdge",
			Handler:    _Graph_RemoveEdge_Handler,
		},
		{
			MethodName: "Edge",
			Handler:    _Graph_Edge_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Graph_Stats_Handler,
		},
		{
			MethodName: "Dump",
			Handler:    _Graph_Dump_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Nodes",
			Handler:       _Graph_Nodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindNodes",
			Handler:       _Graph_FindNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Edges",
			Handler:       _Graph_Edges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}

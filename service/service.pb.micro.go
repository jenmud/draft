// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service.proto

package service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Graph service

func NewGraphEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Graph service

type GraphService interface {
	// AddNode adds a node to the graph.
	AddNode(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeResp, error)
	// RemoveNode remove a node from the graph.
	RemoveNode(ctx context.Context, in *UIDReq, opts ...client.CallOption) (*RemoveResp, error)
	// Node returns the node if found.
	Node(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeResp, error)
	// Nodes returns all the node in the graph.
	Nodes(ctx context.Context, in *NodesReq, opts ...client.CallOption) (Graph_NodesService, error)
	// AddEdge adds a edge to the graph.
	AddEdge(ctx context.Context, in *EdgeReq, opts ...client.CallOption) (*EdgeResp, error)
	// RemoveEdge remove a edge from the graph.
	RemoveEdge(ctx context.Context, in *UIDReq, opts ...client.CallOption) (*RemoveResp, error)
	// Edge returns the edge if found.
	Edge(ctx context.Context, in *EdgeReq, opts ...client.CallOption) (*EdgeResp, error)
	// Edges returns all the edges in the graph.
	Edges(ctx context.Context, in *EdgesReq, opts ...client.CallOption) (Graph_EdgesService, error)
	// Stats returns some stats about the service.
	Stats(ctx context.Context, in *StatsReq, opts ...client.CallOption) (*StatsResp, error)
	// Query sends a query to the graph and returns a dump
	// with the query results.
	Query(ctx context.Context, in *QueryReq, opts ...client.CallOption) (*DumpResp, error)
	// Dump the graph.
	Dump(ctx context.Context, in *DumpReq, opts ...client.CallOption) (*DumpResp, error)
}

type graphService struct {
	c    client.Client
	name string
}

func NewGraphService(name string, c client.Client) GraphService {
	return &graphService{
		c:    c,
		name: name,
	}
}

func (c *graphService) AddNode(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeResp, error) {
	req := c.c.NewRequest(c.name, "Graph.AddNode", in)
	out := new(NodeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) RemoveNode(ctx context.Context, in *UIDReq, opts ...client.CallOption) (*RemoveResp, error) {
	req := c.c.NewRequest(c.name, "Graph.RemoveNode", in)
	out := new(RemoveResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) Node(ctx context.Context, in *NodeReq, opts ...client.CallOption) (*NodeResp, error) {
	req := c.c.NewRequest(c.name, "Graph.Node", in)
	out := new(NodeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) Nodes(ctx context.Context, in *NodesReq, opts ...client.CallOption) (Graph_NodesService, error) {
	req := c.c.NewRequest(c.name, "Graph.Nodes", &NodesReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &graphServiceNodes{stream}, nil
}

type Graph_NodesService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*NodeResp, error)
}

type graphServiceNodes struct {
	stream client.Stream
}

func (x *graphServiceNodes) Close() error {
	return x.stream.Close()
}

func (x *graphServiceNodes) Context() context.Context {
	return x.stream.Context()
}

func (x *graphServiceNodes) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *graphServiceNodes) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *graphServiceNodes) Recv() (*NodeResp, error) {
	m := new(NodeResp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphService) AddEdge(ctx context.Context, in *EdgeReq, opts ...client.CallOption) (*EdgeResp, error) {
	req := c.c.NewRequest(c.name, "Graph.AddEdge", in)
	out := new(EdgeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) RemoveEdge(ctx context.Context, in *UIDReq, opts ...client.CallOption) (*RemoveResp, error) {
	req := c.c.NewRequest(c.name, "Graph.RemoveEdge", in)
	out := new(RemoveResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) Edge(ctx context.Context, in *EdgeReq, opts ...client.CallOption) (*EdgeResp, error) {
	req := c.c.NewRequest(c.name, "Graph.Edge", in)
	out := new(EdgeResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) Edges(ctx context.Context, in *EdgesReq, opts ...client.CallOption) (Graph_EdgesService, error) {
	req := c.c.NewRequest(c.name, "Graph.Edges", &EdgesReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &graphServiceEdges{stream}, nil
}

type Graph_EdgesService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*EdgeResp, error)
}

type graphServiceEdges struct {
	stream client.Stream
}

func (x *graphServiceEdges) Close() error {
	return x.stream.Close()
}

func (x *graphServiceEdges) Context() context.Context {
	return x.stream.Context()
}

func (x *graphServiceEdges) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *graphServiceEdges) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *graphServiceEdges) Recv() (*EdgeResp, error) {
	m := new(EdgeResp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphService) Stats(ctx context.Context, in *StatsReq, opts ...client.CallOption) (*StatsResp, error) {
	req := c.c.NewRequest(c.name, "Graph.Stats", in)
	out := new(StatsResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) Query(ctx context.Context, in *QueryReq, opts ...client.CallOption) (*DumpResp, error) {
	req := c.c.NewRequest(c.name, "Graph.Query", in)
	out := new(DumpResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphService) Dump(ctx context.Context, in *DumpReq, opts ...client.CallOption) (*DumpResp, error) {
	req := c.c.NewRequest(c.name, "Graph.Dump", in)
	out := new(DumpResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Graph service

type GraphHandler interface {
	// AddNode adds a node to the graph.
	AddNode(context.Context, *NodeReq, *NodeResp) error
	// RemoveNode remove a node from the graph.
	RemoveNode(context.Context, *UIDReq, *RemoveResp) error
	// Node returns the node if found.
	Node(context.Context, *NodeReq, *NodeResp) error
	// Nodes returns all the node in the graph.
	Nodes(context.Context, *NodesReq, Graph_NodesStream) error
	// AddEdge adds a edge to the graph.
	AddEdge(context.Context, *EdgeReq, *EdgeResp) error
	// RemoveEdge remove a edge from the graph.
	RemoveEdge(context.Context, *UIDReq, *RemoveResp) error
	// Edge returns the edge if found.
	Edge(context.Context, *EdgeReq, *EdgeResp) error
	// Edges returns all the edges in the graph.
	Edges(context.Context, *EdgesReq, Graph_EdgesStream) error
	// Stats returns some stats about the service.
	Stats(context.Context, *StatsReq, *StatsResp) error
	// Query sends a query to the graph and returns a dump
	// with the query results.
	Query(context.Context, *QueryReq, *DumpResp) error
	// Dump the graph.
	Dump(context.Context, *DumpReq, *DumpResp) error
}

func RegisterGraphHandler(s server.Server, hdlr GraphHandler, opts ...server.HandlerOption) error {
	type graph interface {
		AddNode(ctx context.Context, in *NodeReq, out *NodeResp) error
		RemoveNode(ctx context.Context, in *UIDReq, out *RemoveResp) error
		Node(ctx context.Context, in *NodeReq, out *NodeResp) error
		Nodes(ctx context.Context, stream server.Stream) error
		AddEdge(ctx context.Context, in *EdgeReq, out *EdgeResp) error
		RemoveEdge(ctx context.Context, in *UIDReq, out *RemoveResp) error
		Edge(ctx context.Context, in *EdgeReq, out *EdgeResp) error
		Edges(ctx context.Context, stream server.Stream) error
		Stats(ctx context.Context, in *StatsReq, out *StatsResp) error
		Query(ctx context.Context, in *QueryReq, out *DumpResp) error
		Dump(ctx context.Context, in *DumpReq, out *DumpResp) error
	}
	type Graph struct {
		graph
	}
	h := &graphHandler{hdlr}
	return s.Handle(s.NewHandler(&Graph{h}, opts...))
}

type graphHandler struct {
	GraphHandler
}

func (h *graphHandler) AddNode(ctx context.Context, in *NodeReq, out *NodeResp) error {
	return h.GraphHandler.AddNode(ctx, in, out)
}

func (h *graphHandler) RemoveNode(ctx context.Context, in *UIDReq, out *RemoveResp) error {
	return h.GraphHandler.RemoveNode(ctx, in, out)
}

func (h *graphHandler) Node(ctx context.Context, in *NodeReq, out *NodeResp) error {
	return h.GraphHandler.Node(ctx, in, out)
}

func (h *graphHandler) Nodes(ctx context.Context, stream server.Stream) error {
	m := new(NodesReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GraphHandler.Nodes(ctx, m, &graphNodesStream{stream})
}

type Graph_NodesStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*NodeResp) error
}

type graphNodesStream struct {
	stream server.Stream
}

func (x *graphNodesStream) Close() error {
	return x.stream.Close()
}

func (x *graphNodesStream) Context() context.Context {
	return x.stream.Context()
}

func (x *graphNodesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *graphNodesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *graphNodesStream) Send(m *NodeResp) error {
	return x.stream.Send(m)
}

func (h *graphHandler) AddEdge(ctx context.Context, in *EdgeReq, out *EdgeResp) error {
	return h.GraphHandler.AddEdge(ctx, in, out)
}

func (h *graphHandler) RemoveEdge(ctx context.Context, in *UIDReq, out *RemoveResp) error {
	return h.GraphHandler.RemoveEdge(ctx, in, out)
}

func (h *graphHandler) Edge(ctx context.Context, in *EdgeReq, out *EdgeResp) error {
	return h.GraphHandler.Edge(ctx, in, out)
}

func (h *graphHandler) Edges(ctx context.Context, stream server.Stream) error {
	m := new(EdgesReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.GraphHandler.Edges(ctx, m, &graphEdgesStream{stream})
}

type Graph_EdgesStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*EdgeResp) error
}

type graphEdgesStream struct {
	stream server.Stream
}

func (x *graphEdgesStream) Close() error {
	return x.stream.Close()
}

func (x *graphEdgesStream) Context() context.Context {
	return x.stream.Context()
}

func (x *graphEdgesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *graphEdgesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *graphEdgesStream) Send(m *EdgeResp) error {
	return x.stream.Send(m)
}

func (h *graphHandler) Stats(ctx context.Context, in *StatsReq, out *StatsResp) error {
	return h.GraphHandler.Stats(ctx, in, out)
}

func (h *graphHandler) Query(ctx context.Context, in *QueryReq, out *DumpResp) error {
	return h.GraphHandler.Query(ctx, in, out)
}

func (h *graphHandler) Dump(ctx context.Context, in *DumpReq, out *DumpResp) error {
	return h.GraphHandler.Dump(ctx, in, out)
}

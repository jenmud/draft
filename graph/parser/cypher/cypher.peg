{
// Stripped down OpenCypher parser for quering the graph. 
package cypher

import (
    "log"
    "fmt"
)

type KV struct {
    Key string
    Value []byte
}

type QueryPlan struct {
    ReadingClause []MatchQueryPlan
}

type MatchQueryPlan struct {
    Nodes []NodeQueryPlan
}

type NodeQueryPlan struct {
    Variable string
    Labels []string
    Properties map[string][]byte
}

func toIfaceSlice(v interface{}) []interface{} {
    if v == nil {
        return nil
    }
    return v.([]interface{})
}

func main() {
    if len(os.Args) != 2 {
        log.Fatal("Usage: cypher query 'QUERY'")
    }

    got, err := ParseReader("", strings.NewReader(os.Args[1]))
    if err != nil {
        log.Fatal(err)
    }

    fmt.Println("=", got)
}
}

Statement <- query:Query EOF {
    q := QueryPlan{
        ReadingClause: []MatchQueryPlan{query.(MatchQueryPlan)},
    }

    return q, nil
}

Query <- regularQuery:RegularQuery {
    return regularQuery, nil
}

RegularQuery <-  singleQuery:SingleQuery {
    return singleQuery, nil
}

SingleQuery <- clause:ReadingClause _ {
    return clause, nil
}

ReadingClause <- match:Match {
    return match, nil
}

Match <- M A T C H _ pattern:Pattern {
    plan := MatchQueryPlan{Nodes: []NodeQueryPlan{pattern.(NodeQueryPlan)}}
    return plan, nil
}

Pattern <- PatternPart 

PatternPart <- AnonymousPatternPart

AnonymousPatternPart <- PatternElement

PatternElement <- NodePattern

NodePattern <- '(' variable:Variable _ labels:NodeLabels? _ props:(Properties)? _ ')' {
    plan := NodeQueryPlan{
        Variable: variable.(string),
    }

    if labels != nil {
        plan.Labels = labels.([]string)
    }

    if props != nil {
        plan.Properties = props.(map[string][]byte)
    }

    return plan, nil
}

NodeLabels <- label:NodeLabel _ labels:(NodeLabel)*{
    l := make([]string, 1 + len(labels.([]interface{})))
    l[0] = label.(string)

    for i, label := range labels.([]interface{}) {
        l[i+1] = label.(string)
    }

    return l, nil
}

NodeLabel <- ':' _ label:String {
    return label, nil
}

Variable <- SymbolicName

SymbolicName <- String

Properties <- MapLiteral
ProperyKV <- key:String _ ':' _ value:(StringLiteral/Integer/BoolLiteral){
    switch value.(type) {
    case string:
        return KV{key.(string), []byte(value.(string))}, nil
    case int64:
        return KV{key.(string), []byte(fmt.Sprintf("%d", value.(int64)))}, nil
    case bool:
        return KV{key.(string), []byte(fmt.Sprintf("%t", value.(bool)))}, nil
    default:
        return nil, fmt.Errorf("Don't know what to do with %#v", value)
    }
}

MapLiteral <- '{' _ kv:(ProperyKV _ (',' _ ProperyKV)* )? _ '}' {
    props := make(map[string][]byte)

    propsList := toIfaceSlice(kv)

    if len(propsList) == 0 {
        return props, nil
    }

    first := propsList[0].(KV)
    props[first.Key] = first.Value

    rest := toIfaceSlice(propsList[2])
    for _, pkv := range rest {
        kv := toIfaceSlice(pkv)[2].(KV)
        props[kv.Key] = kv.Value
    }

    return props, nil
}

StringLiteral <- ('"' ( !EscapedChar . / '\\' EscapeSequence )* '"' / "'" ( !EscapedChar . / '\\' EscapeSequence )* "'") {
    c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)

    // deal with single quates
    if strings.HasPrefix(string(c.text), "'") {
        c.text = bytes.ReplaceAll(c.text, []byte(`"`), []byte(`'`))
        c.text = bytes.ReplaceAll(c.text, []byte(`'`), []byte(``))
        return string(c.text), nil
    }

    // deal with double quates
    c.text = bytes.ReplaceAll(c.text, []byte(`'`), []byte(`\'`))
    return strconv.Unquote(string(c.text))
}

EscapedChar <- [\x00-\x1f'"\\]

EscapeSequence <- SingleCharEscape / UnicodeEscape

SingleCharEscape <- ['"\\/bfnrt]

UnicodeEscape <- 'u' HexDigit HexDigit HexDigit HexDigit

String <- [a-zA-Z0-9]+ {
    return string(c.text), nil
}

Integer <- [0-9]+ {
    return strconv.ParseInt(string(c.text), 10, 32)
}

BoolLiteral <- T "rue" { return true, nil } / F "alse" { return false, nil}

_ "whitespace" ← [ \t\r\n]*

A <- ('A' / 'a')
B <- ('B' / 'b')
C <- ('C' / 'c')
D <- ('D' / 'd')
E <- ('E' / 'e')
F <- ('F' / 'f')
G <- ('G' / 'g')
H <- ('H' / 'h')
I <- ('I' / 'i')
K <- ('K' / 'k')
L <- ('L' / 'l')
M <- ('M' / 'm')
N <- ('N' / 'n')
O <- ('O' / 'o')
P <- ('P' / 'p')
Q <- ('Q' / 'q')
R <- ('R' / 'r')
S <- ('S' / 's')
T <- ('T' / 't')
U <- ('U' / 'u')
V <- ('V' / 'v')
W <- ('W' / 'w')
X <- ('X' / 'x')
Y <- ('Y' / 'y')

EOF <- !.